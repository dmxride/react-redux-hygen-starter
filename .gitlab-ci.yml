image: node:14.4-alpine3.10

variables:
  DOCKER_DRIVER: overlay
#  STAGING_SITE_ID: ""
#  PRODUCTION_SITE_ID: ""

stages:
  - linter
  - test
  - promote

before_script:
  - apk --no-cache add git
  - export NODE_OPTIONS=--max_old_space_size=4096

# Eslint check
lint:
  stage: linter
  allow_failure: true
  script:
    - yarn lint
  except:
    refs:
      - tags

# Test
test:
  stage: test
  allow_failure: false
  script:
    - yarn test
  except:
    refs:
      - tags
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Promote to Staging
release qa and promote to staging:
  stage: promote
  only:
    - development
  script:
    #    - npm install netlify-cli@2.61.2 -g --unsafe-perm
    #    - npm install firebase-tools -g --unsafe-perm
    - yarn install
    - yarn build:qa
#    - mkdir ~/.netlify
#    - mkdir .netlify
#    - 'echo "{\"siteId\": \"$STAGING_SITE_ID\"}" > .netlify/state.json'
#    - echo "$NETLIFY_CONFIG" >> ~/.netlify/config.json
#    - netlify deploy --dir build --prod
#    - firebase use --token "$FIREBASE_TOKEN" staging
#    - firebase deploy --only hosting:staging --non-interactive --token "$FIREBASE_TOKEN" --debug

# Promote to Master
release prod and promote to master:
  stage: promote
  only:
    - staging
  script:
    #    - npm install netlify-cli@2.61.2 -g --unsafe-perm
    #    - npm install firebase-tools -g --unsafe-perm
    - yarn install
    - yarn build
#    - mkdir ~/.netlify
#    - mkdir .netlify
#    - 'echo "{\"siteId\": \"$PRODUCTION_SITE_ID\"}" > .netlify/state.json'
#    - echo "$NETLIFY_CONFIG" >> ~/.netlify/config.json
#    - netlify deploy --dir build --prod
#    - firebase use --token "$FIREBASE_TOKEN" production
#    - firebase deploy --only hosting:production --non-interactive --token "$FIREBASE_TOKEN" --debug

